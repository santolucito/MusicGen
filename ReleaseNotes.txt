abc4j includes the true-type music font SONORA.TTF 
This font has been created by Christian TEXIER. More information about this font can be found here:
http://pagespro-orange.fr/christian.texier/mididesi/free/

Version 0.5
===========
****************************************************************************************************************************************************
*** abc4j is now distributed under the LGPL license. The use of abc4j under those license terms is restricted to Java standalone applications.   ***
*** For any other use of abc4j (for example : use over the internet, installation on a web server etc etc), please get in touch with me. 		***
****************************************************************************************************************************************************

* The Midi instrument used during playback can now be changed in the TunePlayer .
* The staff line spacing can now be changed in the JScoreComponent
* A first rough version of the musicXML export is provided.

Version 0.4
===========
* NOT BACKWARD COMPATIBLE, PLEASE UPDATE YOUR CODE FOR THE FOLLOWING CHANGE !!!! :
ScoreElementInterface and ScorePresentationElementInterface have been renamed to MusicElement and
MusicPresentationElement. The reason for this is that, since the introduction of graphical score 
rendition, the term "score" is reserved for the graphical display of music, and the pure music information 
should not use the term "score" that could lead to mistunderstanding.
The inner class Tune.Score is also renamed to Tune.Music

* Ties and Slurs are now supported in the music model (package abc.notation) and are taken into account 
for score rendition and music playback. A limitation is that a note cannot start / end a tie at the same time.
* Chords are now displayed in music score. The only current limitation is that chord with notes that have different
duration are not supported (only one note of the chord is displayed).
* Interface of the JScore has been improved and opened : you can now get access to graphical elements composing the score.
* The way notes are grouped in the score has changed : in the previous version the way notes shortest than the 1/4 note was
decided by the JScoreComponent itself, based on the time signature of the tune. This wasn't consistant with the abc approach :
using abc, it's up to the composer to decide how notes are grouped using spacing between notes. For instance 'abc def' and 'ab cd ef'
are two ways to group the same notes differently. abc4j now respect this syntax and uses the NotesSeparator abstraction from the music
model to implement this feature.
* Issue 5 fix
* Issue 8 fix : Midi playback error : flat in still taken into account after a barline
* Issue 9 fix : Time signatures with numbers up to 13 will be supported for score renditions in 0.4.
(A generic solution for ALL times signatures will be provided later ....)
* Issue 10 fixed.


Version 0.3
===========
* NOT BACKWARD COMPATIBLE, PLEASE UPDATE YOUR CODE FOR THE FOLLOWING CHANGE !!!! :
The getHeight() method in the Note class has been RENAMED to getStrictHeigth()
The getHeight() remains but its meaning has been changed. 
Please refer to the javadoc for further information about those 2 methods.

*NEW : you can now display music scores from your Tune class instances using the
abc.ui.swing.JScore class.
The musical representation still has a lot of limitations (multi notes are 
not displayed, same for chords etc etc), but the basics are here already (imho:).

* Various fixes : 
- issue when moving to JDK 1.5 : midi messages to change the tempo in a midi 
sequence didn't t seem to be recognized by the 1.5 sequencer. I had to work around
this.
- Issue 4 fix : nullpointer exception in tuplets part when parsing.
- Issue 5 fix  : Cb key makes an array out of bounds exception.
- Issue 6 fix : 	isCompound() in time signature has wrong implementation.


Version 0.2
===========
* Lyrics content of abc tunes is now provided from tune score representation.
* Javadoc documentation improvements.
* More reliable implementation of the parser that only parses headers (for a faster parsing).
* New support of non v1.6 standard characters for the text part of abc tunes.
* Clarification of way to express notes duration (see differences between note duration and strict duration).
* Various bug fixes....
